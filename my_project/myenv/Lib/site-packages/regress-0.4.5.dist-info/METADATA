Metadata-Version: 2.1
Name: regress
Version: 0.4.5
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
License-File: LICENSE
Summary: Python bindings to Rust's regress ECMA regular expressions library
Keywords: regex,rust,javascript,ecmascript,regular expressions
Author: Julian Berman
Author-email: Julian+regress@GrayVines.com
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/x-rst; charset=UTF-8
Project-URL: Homepage, https://github.com/crate-py/regress
Project-URL: Issues, https://github.com/crate-py/regress/issues
Project-URL: Funding, https://github.com/sponsors/Julian
Project-URL: Source, https://github.com/crate-py/regress
Project-URL: Upstream, https://github.com/ridiculousfish/regress

===========
``regress``
===========

|PyPI| |Pythons| |CI|

.. |PyPI| image:: https://img.shields.io/pypi/v/regress.svg
  :alt: PyPI version
  :target: https://pypi.org/project/regress/

.. |Pythons| image:: https://img.shields.io/pypi/pyversions/regress.svg
  :alt: Supported Python versions
  :target: https://pypi.org/project/regress/

.. |CI| image:: https://github.com/Julian/regress/workflows/CI/badge.svg
  :alt: Build status
  :target: https://github.com/Julian/regress/actions?query=workflow%3ACI


Python bindings to the Rust `regress <https://docs.rs/regress/latest/regress/>`_ crate, exposing ECMA regular expressions.


.. code:: python

    >>> from regress import Regex
    >>> regex = Regex(r"\d{4}")
    >>> regex.find("2020-20-05") is not None
    True

